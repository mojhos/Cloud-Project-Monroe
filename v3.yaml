
Description:  base VPC + Wordpress installed on an EC2 + MySQL with RDS 
Parameters:
  LatestAmiId:
    Description: AMI for Wordpess Instance (default is latest AmaLinux2023)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  DBName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    Default: 'CloudProject'
    Description: The WordPress database name
    MaxLength: '64'
    MinLength: '1'
    Type: String
  DBPassword:
    Description: The WordPress database admin account password
    MaxLength: '41'
    MinLength: '8'
    Type: String
    Default: 'CloudProject2025'
  DBRootPassword:
    Description: MySQL root password
    MaxLength: '41'
    MinLength: '8'
    Type: String
    Default: 'CloudProject2025'
  DBUser:
    Description: The WordPress database admin account username
    Default: 'wordpress'
    MaxLength: '16'
    MinLength: '1'
    Type: String
  DBVersion:
    Description: The version of MySQL to use
    Default: "8.0.32"
    Type: String
  MultiAZ:
    Description: Multi AZ
    Type: "String"
    Default: "False"
    AllowedValues:
      - "True"
      - "False"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CloudProject
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: cloud-project-igw
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTableWeb: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: cloud-project-web-route
  RouteTableWebDefaultIPv4: 
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTableWeb
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  RouteTableAssociationWebA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetWEBA 
      RouteTableId:
        Ref: RouteTableWeb
  SubnetDBA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.0.0/20
      Tags:
        - Key: Name
          Value: subnet-db-a
  SubnetDBB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.32.0/20
      Tags:
        - Key: Name
          Value: subnet-db-b
  SubnetWEBA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.16.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: subnet-web-a
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Ingress control for RDS instance"
      SecurityGroupIngress: 
        - Description: 'Allow MySQL IPv4 IN'
          IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription:  rds subnet group
      SubnetIds: 
        - !Ref SubnetDBA
        - !Ref SubnetDBB
  DB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: "20"
      DBInstanceClass: "db.t3.micro"
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DBName: !Ref DBName
      Engine: MySQL
      EngineVersion: !Ref DBVersion
      MasterUserPassword: !Ref DBPassword
      MasterUsername: !Ref DBUser
      MultiAZ: "False"
      StorageType: gp2
      Tags: 
        - Key: Name
          Value: "CloudProject-RDS-DB"
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup      
  WordpressEC2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref WordpressInstanceProfile
      SubnetId: !Ref SubnetWEBA
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: cloudProject-Wordpress
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install system software - including Web and DB (because we need the CLI tools)
          dnf install wget php-mysqlnd httpd php-fpm php-mysqli mariadb105-server php-json php php-devel -y
          
          # Start httpd and set to start on system startup
          systemctl enable httpd
          systemctl start httpd
          
          # Install Wordpress
          wget http://wordpress.org/latest.tar.gz -P /var/www/html
          cd /var/www/html
          tar -zxvf latest.tar.gz
          cp -rvf wordpress/* .
          rm -R wordpress
          rm latest.tar.gz

          # Configure Wordpress
          cp ./wp-config-sample.php ./wp-config.php
          sed -i "s/'database_name_here'/'${DBName}'/g" wp-config.php
          sed -i "s/'username_here'/'${DBUser}'/g" wp-config.php
          sed -i "s/'password_here'/'${DBPassword}'/g" wp-config.php
          sed -i "s/'localhost'/'${DB.Endpoint.Address}'/g" wp-config.php   
          usermod -a -G apache ec2-user   
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;

          # CloudWatch Agent Install & Config
          dnf install amazon-cloudwatch-agent -y
          mkdir -p /usr/share/collectd/
          touch /usr/share/collectd/types.db
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CWAgentConfig} -s

          # SIGNAL FINISH OF INSTALL & CONFIG
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WordpressEC2 --region ${AWS::Region}
          
          # WORDPRESS IP FIX 
          cat >> /home/ec2-user/update_wp_ip.sh << EOF
          #!/bin/bash
          source <(php -r 'require("/var/www/html/wp-config.php"); echo("DB_NAME=".DB_NAME."; DB_USER=".DB_USER."; DB_PASSWORD=".DB_PASSWORD."; DB_HOST=".DB_HOST); ')
          SQL_COMMAND="mysql -u $DB_USER -h $DB_HOST -p $DB_PASSWORD $DB_NAME -e"
          OLD_URL=$(mysql -u $DB_USER -h $DB_HOST -p $DB_PASSWORD $DB_NAME -e 'select option_value from wp_options where option_id = 1;' | grep http)
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          HOST=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4)
          $SQL_COMMAND "UPDATE wp_options SET option_value = replace(option_value, '$OLD_URL', 'http://$HOST') WHERE option_name = 'home' OR option_name = 'siteurl';"
          $SQL_COMMAND "UPDATE wp_posts SET guid = replace(guid, '$OLD_URL','http://$HOST');"
          $SQL_COMMAND "UPDATE wp_posts SET post_content = replace(post_content, '$OLD_URL', 'http://$HOST');"
          $SQL_COMMAND "UPDATE wp_postmeta SET meta_value = replace(meta_value,'$OLD_URL','http://$HOST');"
          EOF
          chmod 755 /home/ec2-user/update_wp_ip.sh
          echo "/home/ec2-user/update_wp_ip.sh" >> /etc/rc.local
          /home/ec2-user/update_wp_ip.sh
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 IPv4
      SecurityGroupIngress:
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
  InstanceSecurityGroupSelfReferenceRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: 'tcp'
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
  WordpressRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
  WordpressInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WordpressRole
  CWAgentConfig:
    Type: AWS::SSM::Parameter
    Properties:
      Type: 'String'
      Value: |
        {
          "agent": {
            "metrics_collection_interval": 60,
            "run_as_user": "root"
          },
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/secure",
                    "log_group_name": "/var/log/secure",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "/var/log/httpd/access_log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "/var/log/httpd/error_log",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "append_dimensions": {
              "AutoScalingGroupName": "${aws:AutoScalingGroupName}",
              "ImageId": "${aws:ImageId}",
              "InstanceId": "${aws:InstanceId}",
              "InstanceType": "${aws:InstanceType}"
            },
            "metrics_collected": {
              "collectd": {
                "metrics_aggregation_interval": 60
              },
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ],
                "totalcpu": false
              },
              "disk": {
                "measurement": [
                  "used_percent",
                  "inodes_free"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "diskio": {
                "measurement": [
                  "io_time",
                  "write_bytes",
                  "read_bytes",
                  "writes",
                  "reads"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              },
              "netstat": {
                "measurement": [
                  "tcp_established",
                  "tcp_time_wait"
                ],
                "metrics_collection_interval": 60
              },
              "statsd": {
                "metrics_aggregation_interval": 60,
                "metrics_collection_interval": 10,
                "service_address": ":8125"
              },
              "swap": {
                "measurement": [
                  "swap_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }
Outputs:
  dbhost:
    Description: "RDS Endpoint Address"
    Value: !GetAtt DB.Endpoint.Address
